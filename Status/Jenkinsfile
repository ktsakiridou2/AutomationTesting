dir = ' -dir ../AutomationTesting/Tests/OneSale_CloseBatch_Loop'

def init()
{
        script
        {
                bat 'python.exe ../AutomationTesting/SetupTest.py '
        }
}

def sale(size, offset)
{
    script
    {
        for(int i= offset; i<size; ++i)
        {
                max = 500
                random_num = "${Math.abs(1 + new Random().nextInt(max+1))}"
                amount = '-a' + random_num.toString()
                log = ' -lp saleLog' + i.toString() + '.LOG'
                data = ' -out saleData' + i.toString()+ '.txt'
                str = 'python.exe ../AutomationTesting/Main.py ' + ' -vp ../AutomationTesting/validation/sale0.txt ' + amount + dir + log + data
                bat str 
                log = ' -lp completeSaleLog' + i.toString() + '.LOG'
                data = ' -out completeSaleData' + i.toString()+ '.txt'
                str = 'python.exe ../AutomationTesting/Main.py ' + ' -vp ../AutomationTesting/validation/complete_sale.txt ' + dir + log + data
                bat str
		}
	   	 catchError(stageResult: 'FAILURE')
                {
            	log = ' -lp closeBatchLog' + index.toString() + '.LOG'
            	str = 'python.exe ../AutomationTesting/Main.py ' + ' -vp ../AutomationTesting/validation/closeBatch.txt ' + dir + log
           	bat str
		}
        }
    }
pipeline {
    agent any

    stages 
    {
        stage('Init')
        {
            steps
            {
                init() 
            }
        }
        stage('sale')
        {
            steps
            {
                sale(1, 0)
            }
        }
	}
}
