dir = ' -dir ../AutomationTesting/Tests/stress_test'

def init()
{
        script
        {
                bat 'python.exe ../AutomationTesting/SetupTest.py '
        }
}

def preauth_preauthComp(size)
{
        script
        {
            for(int i=0;i<size;++i)
            {
                catchError(stageResult: 'FAILURE')
                {
                    max = 98
                    random_num = "${Math.abs(1 + new Random().nextInt(max+1))}"
                    amount = '-a' + random_num.toString()
                    log = ' -lp preauthLog' + i.toString() + '.LOG'
                    data = ' -out Data' + i.toString()+ '.txt'
                    globalVal = ' -gv ../AutomationTesting/validation/globalValidations.txt'
                    str = 'python.exe ../AutomationTesting/Main.py ' + connType + ip +' -vp ../AutomationTesting/validation/preauth0.txt ' + amount + dir + log + data + globalVal
                    bat str 


                    log = ' -lp preauthCompletionLog' + i.toString() + '.LOG'
                    data = ' -in Data' + i.toString()+ '.txt'
                    str = 'python.exe ../AutomationTesting/Main.py ' + connType + ip +' -vp ../AutomationTesting/validation/preauthCompletion0.txt ' + dir + log + data + globalVal
                    bat str
                }
            }
            
        }
}

def sale(size)
{
    script
    {
        for(int i=0; i<size; ++i)
        {
            catchError(stageResult: 'FAILURE')
            {
                max = 98
                random_num = "${Math.abs(1 + new Random().nextInt(max+1))}"
                amount = '-a' + random_num.toString()
                data = ' -out Data' + i.toString()+ '.txt'
                log = ' -lp saleLog' + i.toString() + '.LOG'
                globalVal = ' -gv ../AutomationTesting/validation/globalValidations.txt'
                str = 'python.exe ../AutomationTesting/Main.py ' + connType + ip +' -vp ../AutomationTesting/validation/sale0.txt ' + amount + data + dir + log + globalVal
                bat str 
            }
        }
    }
}

def refund(size)
{
    script
    {
        for(int i=0; i<size; ++i)
        {
            catchError(stageResult: 'FAILURE')
            {
                data = ' -in Data' + i.toString()+ '.txt'
                log = ' -lp refundLog' + i.toString() + '.LOG'
                str = 'python.exe ../AutomationTesting/Main.py ' + connType + ip +' -vp ../AutomationTesting/validation/refund0.txt ' + data + log + dir
                bat str
            }
        }
    }

}

def closeBatch(valPath, index)
{
    script
    {
        catchError(stageResult: 'FAILURE')
        {
            log = ' -lp closeBatchLog' + index.toString() + '.LOG'
            str = 'python.exe ../AutomationTesting/Main.py ' + connType + ip +' -vp ' + valPath + dir + log
            bat str
        }
    }
}

pipeline {
    agent any

    stages 
    {

        stage('Init')
        {
            steps
            {
                init() 
            }
        }
            
        stage('closeBatch1')
        {
            steps
            {
                        
                closeBatch('../AutomationTesting/validation/closeBatch.txt', 0)
            }
        }

        stage('preauths/preauthCompletions')
        {
            steps
            {
                preauth_preauthComp(10)
            }
            
        }

        stage('closeBatch2')
        {
            steps
            {
                closeBatch('../AutomationTesting/validation/closeBatch.txt', 1)
            }
        }
        stage('sales')
        {
            steps
            {
                sale(10)
            }
            
        }
        stage('refunds')
        {
            steps
            {
                refund(5)
            }
            
        }
        stage('closeBatch3')
        {
            steps
            {
                closeBatch('../AutomationTesting/validation/closeBatch.txt', 2)
            }
        }
    }
}
