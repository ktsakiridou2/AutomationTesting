dir = ' -dir ../AutomationTesting/Tests/sales_refund_loop'

def sale_refund(size)
{
    script
    {
        catchError(stageResult: 'FAILURE')
        {
                
            for(int i=0; i<size; ++i)
            {
                max = 98
                random_num = "${Math.abs(1 + new Random().nextInt(max+1))}"
                amount = '-a' + random_num.toString()
                
                data = ' -out transData/Data' + i.toString()+ '.txt'
                log = ' -lp Logs/saleLog' + i.toString() + '.LOG'
                str = 'python.exe ../AutomationTesting/Main.py ' + ' -vp ../AutomationTesting/validation/sale0.txt ' + amount + dir + log + data
                bat str 
                
                data = ' -in transData/Data' + i.toString()+ '.txt'
                log = ' -lp Logs/refundLog' + i.toString() + '.LOG'
                str = 'python.exe ../AutomationTesting/Main.py ' + ' -vp ../AutomationTesting/validation/refund0.txt ' + dir + log + data
                bat str
            }
        }
    }
}

def closeBatch(valPath, index)
{
    script
    {
        catchError(stageResult: 'FAILURE')
        {
            log = ' -lp Logs/closeBatchLog' + index.toString() + '.LOG'
            str = 'python.exe ../AutomationTesting/Main.py ' + ' -vp ' + valPath + dir + log
            bat str
        }
    }
}

pipeline {
    agent any

    stages 
    {


        stage('closeBatch1')
        {
            steps
            {
                        
                closeBatch('../AutomationTesting/validation/closeBatch.txt', 1)
            }
        }

        stage('sale_refund')
        {
            steps
            {
                sale_refund(1)
            }
            
        }

        stage('closeBatch2')
        {
            steps
            {
                closeBatch('../AutomationTesting/validation/closeBatch.txt', 2)
            }
        }
    }
}
